name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - v0.16
      - v0.17

env:
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [nightly, beta, stable]
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
        run: rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
        # Install Clippy if we are on a nightly run.
      - name: Install Clippy
        run: rustup component add clippy
        if: startsWith(matrix.rust, 'nightly')
      - name: Install wasm-pack
        uses: taiki-e/install-action@wasm-pack
        if: startsWith(matrix.os, 'ubuntu')
      - name: Run clippy
        run: cargo clippy --locked --workspace --all-features --all-targets -- -Dwarnings
        if: startsWith(matrix.rust, 'nightly')
      - name: No Default Feature checks
        run: cargo check --locked --no-default-features --features rand_xoshiro,rand_pcg --workspace
      - name: Test with all features enabled
        run: cargo test --locked --all-features
      - name: Test Docs
        run: cargo doc --locked
      - name: Test wasm
        run: wasm-pack test --headless --chrome --firefox -- --locked --all-features
        if: startsWith(matrix.os, 'ubuntu')
      - name: Test wasm (no default features)
        run: wasm-pack test --headless --chrome --firefox -- --locked --no-default-features
        if: startsWith(matrix.os, 'ubuntu')
  miri:
    name: "Miri"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Install Miri
        run: |
          rustup toolchain install nightly --component miri
          rustup override set nightly
          cargo miri setup
      - name: Test with Miri
        run: cargo miri test --locked --workspace --all-features
        env:
          # -Zrandomize-layout makes sure we dont rely on the layout of anything that might change
          RUSTFLAGS: -Zrandomize-layout
  msrv:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: get MSRV
        run: |
          msrv=`cargo metadata --no-deps --format-version 1 | jq --raw-output '.packages[] | select(.name=="wyrand") | .rust_version'`
          echo "MSRV=$msrv" >> $GITHUB_ENV
      - name: Install Rust
        run: rustup update ${{ env.MSRV }} --no-self-update && rustup default ${{ env.MSRV }}
      - uses: Swatinem/rust-cache@v2
      - name: Run cargo check
        id: check
        run: cargo check --locked
